plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import org.apache.tools.ant.filters.ReplaceTokens

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
        vendor = JvmVendorSpec.AMAZON
    }
}

version = "${version_major}.${version_minor}.${version_revise}"
archivesBaseName = "ICBM-classic-${version_mc}"

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

legacy {
    fixClasspath = true
    extractMappings = true
    attachMappings = true
}

idea {
    module {
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    // https://projectlombok.org/setup/gradle
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    //Mods
    implementation files('libs/NBT-Exporter-1.0-forgelib.jar')
    compileOnly "mezz.jei:jei_1.12.2:4.16.1.302:api"
    //https://github.com/mekanism/Mekanism/tree/1.12

    //Junit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation files('libs/MinecraftJUnit-1.5.0-deobf.jar') //TODO use forge gradle to deobf for me testImplementation fg.deobf('whateveridc:MinecraftJUnit:1.4.0')
    //TODO example  runtimeOnly(fg.deobf(group = "mezz.jei", name = "jei-1.16.5", version = "7.7.1.121"))

    //Resource injector
    // https://hosuaby.github.io/inject-resources/0.3.2/asciidoc/#inject-resources-junit-jupiter
    // https://github.com/hosuaby/inject-resources
    testImplementation 'io.hosuaby:inject-resources-junit-jupiter:0.3.2' //TODO replace with better maintained library

    //Mockito
    testImplementation 'org.mockito:mockito-inline:4.3.1'
    testImplementation 'org.mockito:mockito-core:4.3.1'

    configurations.forEach {
        // mergetool pollutes the classpath with conflicting classes
        it.exclude(group: 'net.minecraftforge', module: 'mergetool')
    }
}


minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/ICBMClassic_at.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            environment 'MC_VERSION', '1.12.2'

            mods {
                icbmclassic {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            environment 'MC_VERSION', '1.12.2'

            mods {
                icbmclassic {
                    source sourceSets.main
                }
            }
        }
    }
}

task filterTokens(type: Sync) {
    duplicatesStrategy = 'include'

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version

    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [VERSION: version.toString()])
    into "$buildDir/sources"
}

/*compileJava {
    source = filterTokens.outputs
}*/

test {
    useJUnitPlatform()

    maxHeapSize = '1G'
    failFast = false
    workingDir = './run/tests'
    mkdir './run/tests'

    forkEvery = 1
}

processResources {

    // required to allow file expansion later
    duplicatesStrategy = 'include'

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version
    inputs.property 'mcversion', version_mc

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': version, 'mcversion': version_mc
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    //Borrow from darkhax, thank you
    doLast {

        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0

        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {

            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }

        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

jar {
    manifest.mainAttributes(
            "Built-By": System.properties['user.name'],
            "Created-By": "Gradle ${gradle.gradleVersion}",
            'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
            'Specification-Title': "ICBM-Classic",
            'Specification-Vendor': "Built Broken Modding",
            'Specification-Version': "${project.version}",
            "Implementation-Title": project.archivesBaseName,
            "Implementation-Version": "${project.version}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "FMLAT": "ICBMClassic_at.cfg")
}

repositories {
    mavenCentral();
    maven {
        // JEI
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    };
    maven {
        // JEI fallback
        name "ModMaven"
        url "https://modmaven.dev"
    };
    maven {
        name 'SquidDev'
        url 'https://squiddev.cc/maven/'
    };
}
jar.finalizedBy('reobfJar')

task installLocalGitHook(type: Copy){
    from new File(rootProject.rootDir, 'scripts/commit-msg')
    into { new File(rootProject.rootDir, '.git/hooks')}
    fileMode 0775
}

build.dependsOn installLocalGitHook

//TODO jar signing https://github.com/TheCodex6824/ThaumcraftFix/blob/480c97d385d521daf0d7168073e44132f77fbfff/build.gradle#L199


//javadoc { TODO fix doc issues and enable
//    include 'icbm/classic/api/**'
//}

/*task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    archiveClassifier = 'javadoc'
}*/

task apiJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    archiveClassifier = 'api'
    include 'icbm/classic/api/**'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java
    archiveClassifier = 'sources'
}

artifacts {
    archives apiJar
    //archives javadocJar
    archives sourcesJar
}